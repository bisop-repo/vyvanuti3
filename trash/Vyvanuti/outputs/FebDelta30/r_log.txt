
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "../data/temp/FebDelta30.csv"           
[2] "VI"                                    
[3] "outputs/FebDelta30//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2023-02-03 11:31:57."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+ #  Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+ #  custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+ #  Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+ #  custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,robust=FALSE,control=coxph.control(iter.max = 100))))
+   cox = eval(bquote(coxph(.(f.input),data=mtab)))
+ 
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab), fontsize = 1)
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: ../data/temp/FebDelta30.csv"
[1] "...and Cox formula: Surv(T1,T2,Infected) ~ InfPrior + VaccStatus + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, Infected) ~ InfPrior + VaccStatus + 
    AgeGr + Sex, data = mtab)

  n= 1920295, number of events= 7738 

                              coef exp(coef) se(coef)       z Pr(>|z|)    
InfPriorinf_NA_061-090    -3.32979   0.03580  0.50034  -6.655 2.83e-11 ***
InfPriorinf_NA_091-120    -1.65743   0.19063  0.50032  -3.313 0.000924 ***
InfPriorinf_NA_181+       -1.97407   0.13889  0.06926 -28.503  < 2e-16 ***
VaccStatusboost_001-030   -2.36784   0.09368  0.08668 -27.316  < 2e-16 ***
VaccStatusboost_031-060   -2.24223   0.10622  0.12106 -18.521  < 2e-16 ***
VaccStatusboost_061+      -2.33071   0.09723  0.25200  -9.249  < 2e-16 ***
VaccStatusfull_001-030    -1.83003   0.16041  0.12077 -15.153  < 2e-16 ***
VaccStatusfull_031-060    -1.22061   0.29505  0.11918 -10.241  < 2e-16 ***
VaccStatusfull_061-090    -1.42688   0.24006  0.13146 -10.854  < 2e-16 ***
VaccStatusfull_091+       -0.89317   0.40936  0.02694 -33.157  < 2e-16 ***
VaccStatuspartial_001-030 -1.42973   0.23937  0.12163 -11.755  < 2e-16 ***
VaccStatuspartial_031+    -0.85807   0.42398  0.21392  -4.011 6.04e-05 ***
AgeGr0-11                 -0.67468   0.50932  0.04690 -14.386  < 2e-16 ***
AgeGr12-15                -0.12250   0.88470  0.05908  -2.073 0.038136 *  
AgeGr16-17                -0.16422   0.84856  0.08532  -1.925 0.054260 .  
AgeGr18-24                -0.25793   0.77265  0.05783  -4.460 8.18e-06 ***
AgeGr25-29                -0.28140   0.75473  0.05862  -4.800 1.58e-06 ***
AgeGr30-34                -0.05443   0.94703  0.05288  -1.029 0.303303    
AgeGr35-39                 0.01983   1.02003  0.05171   0.383 0.701378    
AgeGr45-49                 0.07655   1.07956  0.05057   1.514 0.130110    
AgeGr50-54                -0.23098   0.79375  0.05895  -3.918 8.92e-05 ***
AgeGr55-59                -0.27766   0.75755  0.06053  -4.587 4.50e-06 ***
AgeGr60-64                -0.53427   0.58610  0.06889  -7.756 8.80e-15 ***
AgeGr65-69                -0.72155   0.48600  0.07344  -9.825  < 2e-16 ***
AgeGr70-74                -0.71219   0.49057  0.07930  -8.981  < 2e-16 ***
AgeGr75-79                -0.50703   0.60228  0.08968  -5.654 1.57e-08 ***
AgeGr80+                  -0.64231   0.52607  0.08503  -7.554 4.21e-14 ***
SexM                      -0.11304   0.89311  0.02282  -4.954 7.26e-07 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                          exp(coef) exp(-coef) lower .95 upper .95
InfPriorinf_NA_061-090      0.03580    27.9325   0.01343   0.09545
InfPriorinf_NA_091-120      0.19063     5.2458   0.07150   0.50823
InfPriorinf_NA_181+         0.13889     7.1999   0.12126   0.15908
VaccStatusboost_001-030     0.09368    10.6743   0.07905   0.11103
VaccStatusboost_031-060     0.10622     9.4143   0.08378   0.13467
VaccStatusboost_061+        0.09723    10.2852   0.05933   0.15933
VaccStatusfull_001-030      0.16041     6.2341   0.12660   0.20325
VaccStatusfull_031-060      0.29505     3.3893   0.23358   0.37269
VaccStatusfull_061-090      0.24006     4.1657   0.18553   0.31061
VaccStatusfull_091+         0.40936     2.4429   0.38830   0.43155
VaccStatuspartial_001-030   0.23937     4.1776   0.18860   0.30381
VaccStatuspartial_031+      0.42398     2.3586   0.27878   0.64481
AgeGr0-11                   0.50932     1.9634   0.46459   0.55835
AgeGr12-15                  0.88470     1.1303   0.78796   0.99332
AgeGr16-17                  0.84856     1.1785   0.71789   1.00301
AgeGr18-24                  0.77265     1.2942   0.68986   0.86538
AgeGr25-29                  0.75473     1.3250   0.67281   0.84662
AgeGr30-34                  0.94703     1.0559   0.85380   1.05044
AgeGr35-39                  1.02003     0.9804   0.92171   1.12883
AgeGr45-49                  1.07956     0.9263   0.97768   1.19205
AgeGr50-54                  0.79375     1.2598   0.70714   0.89097
AgeGr55-59                  0.75755     1.3200   0.67280   0.85298
AgeGr60-64                  0.58610     1.7062   0.51207   0.67082
AgeGr65-69                  0.48600     2.0576   0.42084   0.56123
AgeGr70-74                  0.49057     2.0385   0.41995   0.57306
AgeGr75-79                  0.60228     1.6603   0.50521   0.71802
AgeGr80+                    0.52607     1.9009   0.44532   0.62147
SexM                        0.89311     1.1197   0.85405   0.93396

Concordance= 0.728  (se = 0.002 )
Likelihood ratio test= 5444  on 28 df,   p=<2e-16
Wald test            = 3711  on 28 df,   p=<2e-16
Score (logrank) test = 4773  on 28 df,   p=<2e-16

[1] "Model charts have been generated."
[1] "Model output has been saved (TXT)."
[1] "Model output has been saved (TeX)."
[1] "The procedure is finished in following time:"
Time difference of 57 secs
[1] "Workspace image and log have been saved."
[1] "https://www.youtube.com/watch?v=g3ENX3aHlqU"
> 
