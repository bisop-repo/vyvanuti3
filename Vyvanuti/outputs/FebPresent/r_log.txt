
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "../data/temp/FebPresent.csv"           
[2] "VI"                                    
[3] "outputs/FebPresent//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2023-01-31 15:55:12."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+ #  Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+ #  custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+ #  Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+ #  custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,robust=FALSE,control=coxph.control(iter.max = 100))))
+   cox = eval(bquote(coxph(.(f.input),data=mtab)))
+ 
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab), fontsize = 1)
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: ../data/temp/FebPresent.csv"
[1] "...and Cox formula: Surv(T1,T2,Infected) ~ InfPrior + VaccStatus + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, Infected) ~ InfPrior + VaccStatus + 
    AgeGr + Sex, data = mtab)

  n= 2532809, number of events= 3823 

                              coef exp(coef) se(coef)      z Pr(>|z|)    
InfPriorinf_NA_061-121    -1.01958   0.36075  0.44843 -2.274  0.02299 *  
InfPriorinf_NA_183-243    -0.72717   0.48327  0.50152 -1.450  0.14707    
InfPriorinf_NA_244-304    -1.54677   0.21294  0.24435 -6.330 2.45e-10 ***
InfPriorinf_NA_305+       -1.07607   0.34093  0.10896 -9.876  < 2e-16 ***
VaccStatusboost_001-061    0.28289   1.32695  0.11394  2.483  0.01304 *  
VaccStatusboost_062-122    1.09676   2.99444  0.28056  3.909 9.26e-05 ***
VaccStatusfull_001-061     1.29961   3.66788  0.10883 11.942  < 2e-16 ***
VaccStatusfull_062-122     1.40514   4.07611  0.07825 17.957  < 2e-16 ***
VaccStatusfull_123-183     1.79698   6.03141  0.04337 41.438  < 2e-16 ***
VaccStatusfull_184+        2.00581   7.43214  0.08188 24.496  < 2e-16 ***
VaccStatuspartial_001-061  1.34211   3.82711  0.15309  8.767  < 2e-16 ***
VaccStatuspartial_062+     1.63157   5.11188  0.40915  3.988 6.67e-05 ***
AgeGr0-11                  0.59294   1.80931  0.06702  8.848  < 2e-16 ***
AgeGr12-15                 0.42470   1.52913  0.08406  5.052 4.37e-07 ***
AgeGr16-17                 0.25515   1.29065  0.11224  2.273  0.02301 *  
AgeGr18-24                -0.15194   0.85904  0.08253 -1.841  0.06561 .  
AgeGr25-29                -0.01981   0.98038  0.08338 -0.238  0.81216    
AgeGr30-34                -0.03220   0.96831  0.07935 -0.406  0.68487    
AgeGr35-39                 0.20149   1.22323  0.07326  2.750  0.00595 ** 
AgeGr45-49                -0.12483   0.88265  0.07448 -1.676  0.09373 .  
AgeGr50-54                -0.33699   0.71392  0.08478 -3.975 7.04e-05 ***
AgeGr55-59                -0.39200   0.67571  0.08756 -4.477 7.58e-06 ***
AgeGr60-64                -0.59064   0.55397  0.09843 -6.001 1.96e-09 ***
AgeGr65-69                -0.95027   0.38664  0.10897 -8.720  < 2e-16 ***
AgeGr70-74                -0.79674   0.45080  0.10767 -7.400 1.36e-13 ***
AgeGr75-79                -0.95055   0.38653  0.13308 -7.143 9.14e-13 ***
AgeGr80+                  -0.72002   0.48674  0.12037 -5.982 2.21e-09 ***
SexM                      -0.08751   0.91621  0.03248 -2.694  0.00706 ** 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                          exp(coef) exp(-coef) lower .95 upper .95
InfPriorinf_NA_061-121       0.3607     2.7720    0.1498    0.8688
InfPriorinf_NA_183-243       0.4833     2.0692    0.1808    1.2915
InfPriorinf_NA_244-304       0.2129     4.6963    0.1319    0.3437
InfPriorinf_NA_305+          0.3409     2.9331    0.2754    0.4221
VaccStatusboost_001-061      1.3270     0.7536    1.0614    1.6590
VaccStatusboost_062-122      2.9944     0.3340    1.7278    5.1896
VaccStatusfull_001-061       3.6679     0.2726    2.9633    4.5399
VaccStatusfull_062-122       4.0761     0.2453    3.4966    4.7517
VaccStatusfull_123-183       6.0314     0.1658    5.5399    6.5665
VaccStatusfull_184+          7.4321     0.1346    6.3301    8.7260
VaccStatuspartial_001-061    3.8271     0.2613    2.8350    5.1664
VaccStatuspartial_062+       5.1119     0.1956    2.2925   11.3985
AgeGr0-11                    1.8093     0.5527    1.5866    2.0633
AgeGr12-15                   1.5291     0.6540    1.2969    1.8030
AgeGr16-17                   1.2907     0.7748    1.0358    1.6082
AgeGr18-24                   0.8590     1.1641    0.7307    1.0099
AgeGr25-29                   0.9804     1.0200    0.8326    1.1544
AgeGr30-34                   0.9683     1.0327    0.8288    1.1313
AgeGr35-39                   1.2232     0.8175    1.0596    1.4121
AgeGr45-49                   0.8826     1.1330    0.7628    1.0214
AgeGr50-54                   0.7139     1.4007    0.6046    0.8430
AgeGr55-59                   0.6757     1.4799    0.5691    0.8022
AgeGr60-64                   0.5540     1.8052    0.4568    0.6718
AgeGr65-69                   0.3866     2.5864    0.3123    0.4787
AgeGr70-74                   0.4508     2.2183    0.3650    0.5567
AgeGr75-79                   0.3865     2.5871    0.2978    0.5017
AgeGr80+                     0.4867     2.0545    0.3844    0.6163
SexM                         0.9162     1.0915    0.8597    0.9764

Concordance= 0.705  (se = 0.004 )
Likelihood ratio test= 2344  on 28 df,   p=<2e-16
Wald test            = 2595  on 28 df,   p=<2e-16
Score (logrank) test = 3066  on 28 df,   p=<2e-16

[1] "Model charts have been generated."
[1] "Model output has been saved (TXT)."
[1] "Model output has been saved (TeX)."
[1] "The procedure is finished in following time:"
Time difference of 53 secs
[1] "Workspace image and log have been saved."
[1] "https://www.youtube.com/watch?v=g3ENX3aHlqU"
> 
