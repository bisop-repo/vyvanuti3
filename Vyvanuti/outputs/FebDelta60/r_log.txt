
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> ##1. Initiating procedure
> #1.1 Parsing args (use the commented command below for inputing them wihout console run)
> args = commandArgs(trailingOnly=TRUE) #args = c("data/temp/IOmicron.csv","I","temp.txt")
> print(args)
[1] "../data/temp/FebDelta60.csv"           
[2] "VI"                                    
[3] "outputs/FebDelta60//convertool_log.txt"
> 
> #1.2 Loading libraries
>   library(survival)
>   library(survminer)
>   library(ggplot2)
>   library(data.table)
>   library(vtable)
>   library(xtable)
> 
> #1.3 Saving various useful data
>   systeminfo = Sys.info()
>   user = as.character(systeminfo['login'])
>   computer = as.character(systeminfo['nodename'])
>   time.start = as.character(Sys.time())
>   
>   ptime = gsub(" ","_",time.start)
>   ptime = gsub(":","-",ptime)
>   
>   print(paste("Hello ",user," of ",computer,", it is ",time.start,".",sep=""))
[1] "Hello smid of daman.utia.cas.cz, it is 2023-02-03 15:34:00."
> 
> #1.4 Checking the provided arguments. The following if-else goes through the whole script and stops if requested args are not provided.
>   if(length(args) > 1){
+     print("Inputs have been provided.")
+     data.input = args[1]
+     data.input.events = paste(args[1],"events.csv",sep=".")
+     f.input.id = args[2]
+     cox.f = fread("cox/cox_estimation_formulas.txt",stringsAsFactors = FALSE)
+     f.input = noquote(as.character(cox.f[cox.f$ID == f.input.id,2]))
+ 
+     print(paste("I am using file: ",data.input,sep=""))
+     print(paste("...and Cox formula: ",f.input,sep=""))   
+     
+     if(length(args)>2){
+       print("I can see a convertool log provided.")
+       convertool.log.location = args[3]
+       convertool.log = read.delim(convertool.log.location, header = FALSE, sep = "\t", dec = ".")
+       names(convertool.log) = "record"
+       convertool.vignette = convertool.log[1:7,]
+     } else {
+       print("No Convertool log has been provided.")
+       convertool.log = NA
+       convertool.vignette = NA
+     }
+     
+   ##2. Modeling procedure
+     
+   #2.1 Data loading and initial processing
+   mtab = fread(data.input,stringsAsFactors = FALSE)
+   mtab.events = fread(data.input.events,stringsAsFactors = FALSE)
+   file.name = strsplit(data.input,"/")[[1]]
+   file.name = gsub(".csv","",file.name[length(file.name)])
+   
+   mtab[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   mtab.events[, LastVaccTime := as.integer(LastVaccTime)][LastVaccTime == "_none", LastVaccTime := NULL]
+   mtab.events[, InfPriorTime := as.integer(InfPriorTime)][InfPriorTime == "_none", InfPriorTime := NULL]
+   
+   #2.2 Preparing output directory
+   dir.name = file.name
+   dir.name = paste("outputs/",dir.name,sep="")
+   paste("The model files will be stored in: ",dir.name,"/",sep="")
+   if(file.exists(dir.name)){
+     print("The directory already exists, files will be rewritten.")
+     } else {
+     dir.create(dir.name)
+     print("The directory has been created.")
+ }
+  
+ #2.3. Switching to output directory, saving input file's descriptive stats
+   st(mtab,out='csv',file=paste(dir.name,'input_summary.csv',sep="/"))
+ 
+   custom.dq = list()
+   
+   VaccStatus_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at T1 == 0"]] = VaccStatus_medians
+   
+ #  Immunity_medians = mtab[mtab$T1 == 0,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+ #  custom.dq[["Median stats for Immunity at T1 == 0"]] = Immunity_medians
+   
+   VaccStatus_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(VaccStatus)]
+   custom.dq[["Median stats for VaccStatus at the respective T"]] = VaccStatus_medians_events
+   
+ #  Immunity_medians_events = mtab.events[,.(N=.N,age_median=median(Age),LastVaccTime_median=median(LastVaccTime),InfPriorTime_median=median(InfPriorTime)),.(Immunity)]
+ #  custom.dq[["Median stats for Immunity at the respective T"]] = Immunity_medians_events
+   
+   sink(paste(dir.name,"input_summary_custom.txt",sep="/"))
+   print(custom.dq)
+   sink()  
+   gc()
+ 
+   print("The input file has been loaded, its properties have been saved. Proceeding to Cox model.")
+   
+   
+   
+ #2.4 Cox model estimation
+   f.input = as.formula(f.input)
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,cluster=Subject)))
+ #  cox = eval(bquote(coxph(.(f.input),data=mtab,robust=FALSE,control=coxph.control(iter.max = 100))))
+   cox = eval(bquote(coxph(.(f.input),data=mtab)))
+ 
+   cox.summary = summary(cox) 
+   print(cox.summary) # returns output to the console
+ 
+   ##3. Model outputs generation
+   #3.1 Hazard ratio plot
+   ggforest(cox, data = data.frame(mtab), fontsize = 1)
+   ggsave(paste(dir.name,"cox_risks_log.jpg",sep="/"),units="px",width=3840,height=3840)
+   print("Model charts have been generated.")
+   
+   #3.2 Txt (model summary)
+   sink(paste(dir.name,"cox_output.txt",sep="/"))
+   print(cox.summary)
+   sink()  
+   gc()
+   print("Model output has been saved (TXT).")
+ 
+   #3.2 TeX (params and exp(params))
+   beta <- coef(cox)
+   se   <- sqrt(diag(cox$var))
+   p    <- 1 - pchisq((beta/se)^2, 1)
+   CI   <- round(confint(cox), 3)
+   res <- data.frame(beta, se = se, CI, p)
+   names(res)[3:4] = c("low","high")
+   res$model.betas = paste(round(res$beta,2)," (",round(res$low,2),", ",round(res$high,2),")",sep="")
+   
+   res$hr = exp(res$beta)
+   res$hr.se = exp(res$se)
+   res$hr.low = exp(res$low)
+   res$hr.high = exp(res$high)
+   res$model.hr = paste(round(res$hr,2)," (",round(res$hr.low,2),", ",round(res$hr.high,2),")",sep="")
+   
+   res$eff = 1-res$hr
+   res$eff.high = 1-res$hr.low
+   res$eff.low = 1-res$hr.high
+   res$model.effectiveness = paste(round(res$eff,2)," (",round(res$eff.low,2),", ",round(res$eff.high,2),")",sep="")
+ 
+   modtab = res[,c("model.betas","model.hr","model.effectiveness")]
+   names(modtab) = c("Beta","HR","1-HR")
+   print(xtable(modtab),include.rownames=TRUE,file = paste(dir.name,"cox_output.tex",sep="/"), compress = FALSE)
+   print("Model output has been saved (TeX).")  
+   
+   #4. Closing sequence
+   time.end = as.character(Sys.time())
+   model.spent = difftime(time.end,time.start)
+   print("The procedure is finished in following time:")
+   print(model.spent)
+   
+   #4.1 Saving model run stats
+   run.overview = list()
+   run.overview[["user"]] = user
+   run.overview[["computer"]] = computer
+   run.overview[["arguments"]] = args
+   run.overview[["time.start"]] = time.start
+   run.overview[["time.end"]] = time.end
+   run.overview[["model.spent"]] = model.spent
+   run.overview[["model.concordance"]] = cox$concordance['concordance']
+   run.overview[["convertool.vignette"]] = convertool.vignette
+   
+   res$model.concordance = run.overview[["model.concordance"]]
+   res$model.ctool.version = run.overview[["convertool.vignette"]][1]
+   res$model.age.filter = run.overview[["convertool.vignette"]][4]
+   res$model.input.file = run.overview[["convertool.vignette"]][7]
+   res$model.input.horizon = run.overview[["convertool.vignette"]][5]
+   res$model.mode = f.input.id
+   res$model.calculated.at = time.end
+   
+   write.csv(res,file=paste(dir.name,"model_data.csv",sep="/"),row.names=FALSE)
+ 
+   sink(paste(dir.name,"model_run_overview.txt",sep="/"))
+   print(run.overview)
+   sink()
+ 
+   #4.2 Saving environment image (without the most heavy items)
+   rm(mtab,cox)
+   save(list=ls(), file=paste(dir.name,"environment.Rdata",sep="/"),compress=TRUE,compression_level=9)
+   print("Workspace image and log have been saved.")
+   print("https://www.youtube.com/watch?v=g3ENX3aHlqU")
+   
+   } else {
+     stop("Data input has not been provided, goodbye")
+     print(data.input)
+   }
[1] "Inputs have been provided."
[1] "I am using file: ../data/temp/FebDelta60.csv"
[1] "...and Cox formula: Surv(T1,T2,Infected) ~ InfPrior + VaccStatus + AgeGr + Sex"
[1] "I can see a convertool log provided."
[1] "The directory already exists, files will be rewritten."
[1] "The input file has been loaded, its properties have been saved. Proceeding to Cox model."
Call:
coxph(formula = Surv(T1, T2, Infected) ~ InfPrior + VaccStatus + 
    AgeGr + Sex, data = mtab)

  n= 1902962, number of events= 7738 

                              coef exp(coef) se(coef)       z Pr(>|z|)    
InfPriorinf_NA_061-121    -2.82340   0.05940  0.35403  -7.975 1.52e-15 ***
InfPriorinf_NA_183-243    -2.16373   0.11490  0.40852  -5.297 1.18e-07 ***
InfPriorinf_NA_244-304    -2.64865   0.07075  0.18307 -14.468  < 2e-16 ***
InfPriorinf_NA_305+       -1.78363   0.16803  0.07575 -23.545  < 2e-16 ***
VaccStatusboost_001-061   -2.31267   0.09900  0.07268 -31.820  < 2e-16 ***
VaccStatusboost_062-122   -2.22828   0.10771  0.25205  -8.841  < 2e-16 ***
VaccStatusfull_001-061    -1.56218   0.20968  0.08513 -18.350  < 2e-16 ***
VaccStatusfull_062-122    -1.18971   0.30431  0.05568 -21.367  < 2e-16 ***
VaccStatusfull_123-183    -0.88861   0.41123  0.03018 -29.442  < 2e-16 ***
VaccStatusfull_184+       -0.66495   0.51430  0.05542 -11.998  < 2e-16 ***
VaccStatuspartial_001-061 -1.45142   0.23424  0.11994 -12.102  < 2e-16 ***
VaccStatuspartial_062+    -0.65035   0.52186  0.22431  -2.899  0.00374 ** 
AgeGr0-11                 -0.67081   0.51129  0.04696 -14.286  < 2e-16 ***
AgeGr12-15                -0.09712   0.90745  0.05944  -1.634  0.10229    
AgeGr16-17                -0.12224   0.88493  0.08573  -1.426  0.15392    
AgeGr18-24                -0.22684   0.79705  0.05809  -3.905 9.43e-05 ***
AgeGr25-29                -0.26706   0.76563  0.05872  -4.548 5.42e-06 ***
AgeGr30-34                -0.04398   0.95697  0.05292  -0.831  0.40595    
AgeGr35-39                 0.02561   1.02594  0.05173   0.495  0.62060    
AgeGr45-49                 0.07162   1.07425  0.05058   1.416  0.15680    
AgeGr50-54                -0.24058   0.78617  0.05898  -4.079 4.52e-05 ***
AgeGr55-59                -0.29108   0.74746  0.06059  -4.804 1.56e-06 ***
AgeGr60-64                -0.54695   0.57871  0.06893  -7.935 2.11e-15 ***
AgeGr65-69                -0.73894   0.47762  0.07350 -10.054  < 2e-16 ***
AgeGr70-74                -0.74104   0.47662  0.07958  -9.312  < 2e-16 ***
AgeGr75-79                -0.54020   0.58263  0.08992  -6.007 1.89e-09 ***
AgeGr80+                  -0.67274   0.51031  0.08519  -7.897 2.85e-15 ***
SexM                      -0.10862   0.89707  0.02284  -4.755 1.98e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

                          exp(coef) exp(-coef) lower .95 upper .95
InfPriorinf_NA_061-121      0.05940    16.8340   0.02968    0.1189
InfPriorinf_NA_183-243      0.11490     8.7035   0.05159    0.2559
InfPriorinf_NA_244-304      0.07075    14.1349   0.04942    0.1013
InfPriorinf_NA_305+         0.16803     5.9514   0.14484    0.1949
VaccStatusboost_001-061     0.09900    10.1013   0.08585    0.1142
VaccStatusboost_062-122     0.10771     9.2839   0.06572    0.1765
VaccStatusfull_001-061      0.20968     4.7692   0.17746    0.2478
VaccStatusfull_062-122      0.30431     3.2861   0.27285    0.3394
VaccStatusfull_123-183      0.41123     2.4317   0.38761    0.4363
VaccStatusfull_184+         0.51430     1.9444   0.46136    0.5733
VaccStatuspartial_001-061   0.23424     4.2692   0.18517    0.2963
VaccStatuspartial_062+      0.52186     1.9162   0.33622    0.8100
AgeGr0-11                   0.51129     1.9558   0.46634    0.5606
AgeGr12-15                  0.90745     1.1020   0.80765    1.0196
AgeGr16-17                  0.88493     1.1300   0.74806    1.0469
AgeGr18-24                  0.79705     1.2546   0.71128    0.8932
AgeGr25-29                  0.76563     1.3061   0.68239    0.8590
AgeGr30-34                  0.95697     1.0450   0.86268    1.0616
AgeGr35-39                  1.02594     0.9747   0.92702    1.1354
AgeGr45-49                  1.07425     0.9309   0.97285    1.1862
AgeGr50-54                  0.78617     1.2720   0.70035    0.8825
AgeGr55-59                  0.74746     1.3379   0.66376    0.8417
AgeGr60-64                  0.57871     1.7280   0.50558    0.6624
AgeGr65-69                  0.47762     2.0937   0.41354    0.5516
AgeGr70-74                  0.47662     2.0981   0.40778    0.5571
AgeGr75-79                  0.58263     1.7163   0.48849    0.6949
AgeGr80+                    0.51031     1.9596   0.43184    0.6030
SexM                        0.89707     1.1147   0.85780    0.9381

Concordance= 0.729  (se = 0.002 )
Likelihood ratio test= 5485  on 28 df,   p=<2e-16
Wald test            = 3731  on 28 df,   p=<2e-16
Score (logrank) test = 4807  on 28 df,   p=<2e-16

[1] "Model charts have been generated."
[1] "Model output has been saved (TXT)."
[1] "Model output has been saved (TeX)."
[1] "The procedure is finished in following time:"
Time difference of 58 secs
[1] "Workspace image and log have been saved."
[1] "https://www.youtube.com/watch?v=g3ENX3aHlqU"
> 
